•	Write a structure containing int, char and float variable

struct temp{
    int a;
    char b;
    float c;
};


•	Call the structure in main function 

Int main()
{
temp temporary1, temporary2;
return 0;
}


•	Is there any other way of creating objects  of structure type
struct temp{
    int a;
    char b;
    float c;
} temporary1, temporary2;


•	What is the size of int and it’s value range
cout<<sizeof(int)  
ans = 4 (in bytes)

cout<<INT_MAX<<" to"<<INT_MIN;
range  = 2147483647 to  -2147483648
-(2^16 - 1)   to   (2^16 - 1)
As int has 4 bytes so 4*8 = 32bits (16 for +ve values and 16 for -ve values) 


•	Change previously defined structure and define unsigned int of 16, 32 and 64 bits
struct temp{
    uint_16 a;
    unit_32 b;
    uint_64 c;
} temporary1, temporary2;

•	Does the order of their declaration matter?
•	What is the size of above structure?
Ans to both the question can be explained with the help of padding and packing concepts 
Below links can be helpful for better understading
https://www.youtube.com/watch?v=QSuBwGmFQqA

https://stackoverflow.com/questions/7970383/extra-bytes-when-declaring-a-member-of-a-ssssstruct-as-uint32-t
https://stackoverflow.com/questions/119123/why-isnt-sizeof-for-a-struct-equal-to-the-sum-of-sizeof-of-each-member

However for this specific case answer is 16 bytes for all orders coincidentally!!

•	What exactly the the sizeof does
It’s used to get the size of classes, structures, data variables and other user defined data types.
When sizeof is applied on the array type then it gives the size in terms of bytes occupied by the 
Array in the memory. However when an pointer to the array is passes it will give the sizeof the pointer which is of 4 bytes in general machine and C language.


•	sizeof is an operator or function
according to C++11 standards the sizeof is an operator more detailed explanation can 
be fond here:
https://stackoverflow.com/questions/1393582/why-is-sizeof-considered-an-operator



•	Explain the operation of memcpy 
memcpy takes 3 parameters memcpy(void *dest, void * src, size_t num)
it takes the pointer to the memory of any object they are irrelevant and copy the  num bytes values from src to dest. The binary copy of data is maintained. If the objects overlap or either of them is null in that case the behavior is undefined, even if count is zero.









